#include "../src/include/Interpolation.hpp"

#include <algorithm>
#include <iostream>
#include <iterator>

using namespace std;

int main() {
    vector<double> f{{0.905515, 0.894638, -0.433134, 0.43131, -0.131052,
                      0.262974, 0.423888, -0.562671, -0.915567, -0.261017,
                      -0.47915, -0.00939326, -0.445962}};
    InterpolationFunction<double> interp(
        3, std::make_pair(0., (double)(f.size() - 1)), f.begin(), f.end());

    // Values pre-computed by MMA
    auto val = {
        0.905515,  1.29267,     1.43783,   1.38833,   1.19149,   0.894638,
        0.545115,  0.190246,    -0.122639, -0.346209, -0.433134, -0.355341,
        -0.161787, 0.079315,    0.299752,  0.43131,   0.42578,   0.314968,
        0.150685,  -0.0152583,  -0.131052, -0.157626, -0.106876, -0.00343521,
        0.12806,   0.262974,    0.379051,  0.463546,  0.506094,  0.49633,
        0.423888,  0.283832,    0.0929406, -0.126579, -0.352519, -0.562671,
        -0.737358, -0.867021,   -0.94463,  -0.963155, -0.915567, -0.801405,
        -0.646484, -0.48319,    -0.343906, -0.261017, -0.256133, -0.307767,
        -0.383656, -0.451538,   -0.47915,  -0.443234, -0.356544, -0.240835,
        -0.117866, -0.00939326, 0.0628267, 0.0770367, 0.0114798, -0.155601,
        -0.445962};

    cout << "\nInterpolation Test:\n";
    double d = 0;
    auto iter = val.begin();
    for (double x = 0.; x < (double)(f.size() - 1); x += 0.2, ++iter) {
        d += (interp(x) - *iter) * (interp(x) - *iter);
        cout << x << " " << interp(x) << '\n';
    }
    return std::sqrt(d / val.size()) < 1e-6 ? 0 : 1;
}